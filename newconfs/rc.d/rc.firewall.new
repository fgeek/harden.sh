#!/bin/sh
################################################################################
# rc.firewall                                                                  #
################################################################################
declare -r LOG_PRIORITY="debug"
declare -r INT_IF=""
declare -r INT_NET=""
declare -r STATE_FILE="/var/state/iptables.state"
declare -r BLOCK_INCOMING=0
declare -r ALLOW_PING=0
declare -a ALLOWED_TCP_PORTS=()
declare -a ALLOWED_UDP_PORTS=()
#declare -r EXT="eth1"
umask 077
export PATH="/usr/sbin:/sbin:/usr/bin:/bin"
# eu-v20.events.data.microsoft.com
declare -a microsoft_telemetry_hosts=(52.114.74.44 52.114.77.33 52.114.75.79 52.114.75.149 52.114.75.150 52.114.74.43 52.114.77.34 52.114.75.78 52.114.76.35 52.114.77.164 52.114.74.45 52.114.76.34 52.114.76.37)
################################################################################
function log_and_reject() {
  # $1 = log-prefix
  # $2 = reject with
  # $3 -> = iptables parameters
  # log-level == priority in syslog                                            #
  [ ${#} -lt 3 ] && {
    echo "${FUNCNAME}(): error!"
    return 1
  }
  local LOG_PREFIX="${1}"
  local REJECT_WITH="${2}"
  shift 2
  iptables \
    ${*} \
    --jump      LOG \
    --log-prefix        "${LOG_PREFIX}: " \
    --log-level         "${LOG_PRIORITY}" \
    --log-tcp-sequence \
    --log-tcp-options \
    --log-ip-options
  iptables ${*} --jump REJECT --reject-with "${REJECT_WITH}"
  return 0
} # log_and_reject()
################################################################################
function log_only() {
  # $1 = log-prefix
  # $2 -> = iptables parameters
  # log-level == priority in syslog                                            #
  [ ${#} -lt 2 ] && {
    echo "${FUNCNAME}(): error!"
    return 1
  }
  local LOG_PREFIX="${1}"
  shift 1
  iptables \
    ${*} \
    --jump      LOG \
    --log-prefix        "${LOG_PREFIX}: " \
    --log-level         "${LOG_PRIORITY}" \
    --log-tcp-sequence \
    --log-tcp-options \
    --log-ip-options
  return 0
} # log_only()
################################################################################
function create_logndrop_chain() {
  local iptablescmd
  ##############################################################################
  # LOG AND DROP PACKETS                                                       #
  ##############################################################################
  # Michael_Rash_OSCON_2007.pdf:                                               #
  #                                                                            #
  # Iptables Logging Args                                                      #
  # When building iptables LOG rules:                                          #
  #                                                                            #
  # Use --log-ip-options                                                       #
  # Use --log-tcp-sequence                                                     #
  # Use --log-tcp-options                                                      #
  #                                                                            #
  # More attacks can be detected, and operating                                #
  # systems can be passively fingerprinted                                     #
  ##############################################################################
  for iptablescmd in iptables ip6tables
  do
    ${iptablescmd} -N LOGNDROP
    ${iptablescmd} -F LOGNDROP
    ${iptablescmd} \
      -t filter -A LOGNDROP \
      --jump	LOG \
      --log-prefix	"DROP: " \
      --log-level		"${LOG_PRIORITY}" \
      --log-tcp-sequence \
      --log-tcp-options \
      --log-ip-options
    ${iptablescmd}  -t filter -A LOGNDROP --jump DROP
  done
} # create_logndrop_chain()
################################################################################
function set_default_policies() {
  local CHAIN
  local INPUT_POLICY

  echo "[+] rc.firewall ${FUNCNAME}(): setting the default policies"

  # Turn off IPv4 packet forwarding support.
  if [ -x /etc/rc.d/rc.ip_forward ]
  then
    echo "[+] rc.firewall ${FUNCNAME}(): disabling IP forwarding..."
    . /etc/rc.d/rc.ip_forward stop
  fi

  #echo 1 1>/proc/sys/net/ipv4/tcp_syncookies

  ##############################################################################
  # default policies                                                           #
  ##############################################################################
  (( ${BLOCK_INCOMING} )) && INPUT_POLICY="DROP" || INPUT_POLICY="ACCEPT"
  iptables --table filter --policy INPUT	${INPUT_POLICY}
  iptables --table filter --policy FORWARD	DROP
  iptables --table filter --policy OUTPUT	ACCEPT

  # drop policy for IPv6
  echo "[+] rc.firewall ${FUNCNAME}(): disabling IPv6 traffic..."
  for CHAIN in INPUT OUTPUT FORWARD
  do
    ip6tables -P "${CHAIN}" DROP
    # http://www.cipherdyne.org/psad/docs/fwconfig.html
    if [ "${CHAIN}" != "OUTPUT" ]
    then
      ip6tables -A "${CHAIN}" -j LOG
    fi
  done

  # TODO: localhost? nmap book page 263?

  return 0
} # set_default_policies()
################################################################################
function start() {
  echo "[+] rc.firewall ${FUNCNAME}()"

  set_default_policies
  create_logndrop_chain

  ###### INPUT chain ######

  echo "[+] rc.firewall ${FUNCNAME}(): setting up INPUT chain..."

  ##############################################################################
  # invalid packets                                                            #
  ##############################################################################
  iptables --table filter --append INPUT --match state --state INVALID -j LOGNDROP

  ##############################################################################
  # allow loopback                                                             #
  ##############################################################################
  iptables -t filter -A INPUT -i lo -s 127.0.0.1 -d 127.0.0.1 -j ACCEPT

  ##############################################################################
  # drop SSDP packets                                                          #
  ##############################################################################
  iptables -t filter -A INPUT -d 239.255.255.250 -p udp -m udp --dport 1900 -j LOGNDROP


  if [ -n "${INT_IF}" ] && [ -n "${INT_NET}" ]
  then
    iptables --table filter --append INPUT -i ${INT_IF} ! -s $INT_NET -j LOGNDROP
  fi

  # allowed ports
  #   - when BLOCK_INCOMING=0 this will make it so, that these are not logged in the end (state=NEW)
  for ALLOWED_PORT in ${ALLOWED_TCP_PORTS[*]}
  do
    iptables -t filter -A INPUT -p tcp -m tcp --dport ${ALLOWED_PORT} -j ACCEPT
  done
  for ALLOWED_PORT in ${ALLOWED_UDP_PORTS[*]}
  do
    iptables -t filter -A INPUT -p udp -m udp --dport ${ALLOWED_PORT} -j ACCEPT
  done

  if (( ${BLOCK_INCOMING} ))
  then
    if (( ${ALLOW_PING} ))
    then
      iptables -t filter -A INPUT -p icmp --icmp-type echo-request -j ACCEPT
    fi
    iptables		--table filter --append INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
  else
    # INPUTs that we want to explicitly deny when policy!=DROP

    ##############################################################################
    # reject icmp timestamp requests for a cleaner nessus report=)               #
    # see CVE-1999-0524 &  http://osvdb.org/94                                   #
    ##############################################################################
    log_and_reject "REJECT ICMP Timestamp req" "icmp-admin-prohibited" -A INPUT -p icmp --icmp-type timestamp-request
  fi

  ##############################################################################
  # drop replys                                                                #
  ##############################################################################
  iptables -t filter -A OUTPUT -p icmp --icmp-type timestamp-reply -j LOGNDROP

  ##############################################################################
  # drop outgoing packets to Microsoft's telemetry hosts                       #
  ##############################################################################
  # https://serverfault.com/a/812952
  if ! ipset list telemetry &>/dev/null
  then
    ipset -N telemetry iphash
    for i in ${microsoft_telemetry_hosts[*]}
    do
      ipset add telemetry "${i}"
    done
  fi
  iptables -A OUTPUT -m set --match-set telemetry dst -j DROP

  ##############################################################################
  # log other incoming packets                                                 #
  ##############################################################################
  if (( ${BLOCK_INCOMING} ))
  then
    # make logging the last rule when policy=DROP
    log_only "DROP POLICY" -A INPUT
  else
    log_only "NEW" -A INPUT -m state --state NEW
  fi

  return 0
} # start()
################################################################################
function stop() {
  local    TABLE
  local -a TABLES=(`cat /proc/net/ip_tables_names 2>/dev/null`)
  for TABLE in ${TABLES[*]}
  do
    echo "[+] rc.firewall ${FUNCNAME}(): flushing rules from table ${TABLE}"
    iptables --table "${TABLE}" --flush
  done
  # "There must be no  references  to  the chain" ... so we run this last
  echo "[+] rc.firewall ${FUNCNAME}(): deleting (possible) user-defined chains"
  iptables -X
  # IPv6
  TABLES=(`cat /proc/net/ip6_tables_names 2>/dev/null`)
  for TABLE in ${TABLES[*]}
  do
    ip6tables --table "${TABLE}" --flush
    echo "[+] rc.firewall ${FUNCNAME}(): flushing rules from table ${TABLE} (IPv6)"
  done
  return ${?}
} # stop()
################################################################################
function status() {
  local    TABLE
  local -a TABLES=(`cat /proc/net/ip_tables_names 2>/dev/null`)
  #echo "forwarding:"
  #sysctl net.ipv4.conf 2>/dev/null | awk -F'.' '/forwarding = 1$/{printf "  %s\n",$4}'
  for TABLE in ${TABLES[*]}
  do
    echo "table ${TABLE}:"
    iptables -t "${TABLE}" -n -v -L
  done
  return 0
} # status()
################################################################################
function usage() {
  cat 0<<-EOF
	usage: ${0} start|stop|restart|status
EOF
  return ${?}
} # usage()
################################################################################
function load_state() {
  local -i RET=0
  echo "${0##*/}: ${FUNCNAME}()"
  logger -t "${0##*/}" "${FUNCNAME}()"
  ##############################################################################
  # if the state file doesn't exist or is not readable, we fall back to        #
  # initializing the firewall "from scratch"                                   #
  ##############################################################################
  if [ ! -f "${STATE_FILE}" -o ! -r "${STATE_FILE}" ]
  then
    echo "${FUNCNAME}(): error!" 1>&2
    /usr/bin/logger -t "${0##*/}" "${FUNCNAME}(): failed"
    return 1
  fi
  /usr/sbin/iptables-restore -c 0<"${STATE_FILE}"
  RET=${?}
  /usr/bin/logger -t "${0##*/}" "${FUNCNAME}(): restored firewall rules from state file with status ${RET}"
  rm -v -f "${STATE_FILE}"
  /usr/bin/logger -t "${0##*/}" "${FUNCNAME}(): state file removed"
  return ${RET}
} # load_state()
################################################################################
function save_state() {
  # this function is invoked from stop() or by directly running rc.firewall save
  local -i RET=0
  echo "${0##*/}: ${FUNCNAME}()"
  /usr/sbin/iptables-save -c 1>"${STATE_FILE}"
  RET=${?}
  # if there is some problem saving the state, assume it's useless and remove it.
  if [ ${RET} -ne 0 ]
  then
    /usr/bin/rm -v "${STATE_FILE}"
  fi
  /usr/bin/logger -t "${0##*/}" "${FUNCNAME}(): state saved with status ${RET}"
  return ${RET}
} # save_state()
################################################################################
# TODO: http://refspecs.linux-foundation.org/LSB_4.1.0/LSB-Core-generic/LSB-Core-generic/iniscrptact.html
case "${1}" in
  "start") start ;;
  "stop")  stop  ;;
  "restart"|"reload"|"force-reload")
    stop
    start
  ;;
  "status") status ;;
esac

exit 0
