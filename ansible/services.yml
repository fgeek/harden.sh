---
# Unwanted services
- name: Stop & disable unwanted services (Debian)
  become: yes
  when: ansible_distribution == "Debian" or ansible_distribution == "Kali GNU/Linux"
  service:
    name: "{{ item }}"
    state: stopped
    enabled: no
  with_items: "{{ debian_services }}"
  failed_when:
    - result.failed == true
    - '"Could not find the requested service" not in result.msg'
  register: result
- name: Stop unwanted services (Slackware)
  become: yes
  when: ansible_distribution == "Slackware"
  ignore_errors: yes
  command: /bin/sh /etc/rc.d/rc.{{ item }} stop
  with_items: "{{ slackware_services }}"
- name: Disable unwanted services (Slackware)
  become: yes
  when: ansible_distribution == "Slackware"
  file:
    path: "/etc/rc.d/rc.{{ item }}"
    owner: root
    group: root
    mode: ugo-x
  with_items: "{{ slackware_services }}"
  register: result
  failed_when:
    - result.failed == true
    - result.state != "absent"
# Cron
- name: Restrict cron (cron.allow)
  when: ansible_distribution == "Debian" or ansible_distribution == "Kali GNU/Linux"
  become: yes
  file:
    path: /etc/cron.allow
    state: touch
    owner: root
    group: crontab
    mode: '0640'
- name: Restrict cron (cron.deny)
  when: ansible_distribution == "Debian" or ansible_distribution == "Kali GNU/Linux"
  become: yes
  file:
    path: /etc/cron.deny
    state: absent
- name: Create a job that checks systemd's state
  become: yes
  when: ansible_distribution == "Debian" or ansible_distribution == "Kali GNU/Linux" or ansible_os_family == "RedHat"
  cron:
    name: "Check SystemState"
    job: "/bin/systemctl show --property=SystemState | /bin/grep -v '^SystemState=running$'"
    minute: "*/5"
    state: present
- name: Slackware's cron
  block:
  - name: Increase crond's log level (Slackware)
    replace:
      path: /etc/default/crond
      regexp: '^(CROND_OPTS=".*)-l [a-z]+(.*")$'
      replace: '\g<1>-l info\g<2>'
      validate: '/bin/grep "^CROND_OPTS=\".*-l info.*\"$" %s'
  - name: Restrict cron (Slackware)
    file:
      path: /usr/bin/crontab
      group: wheel
      mode: '4710'
  - name: Set permissions for /var/spool/cron
    file:
      path: /var/spool/cron
      owner: root
      group: root
      mode: '0700'
  - name: Set permissions for /var/spool/cron/crontabs
    file:
      path: /var/spool/cron/crontabs
      owner: root
      group: root
      mode: '0700'
  # user needs to have x perms into the directory where the temp file is created
  # Slackware 14.2 has /var/spool/cron as TMPDIR and 14.2+ has /run/cron
  - name: Fix /etc/rc.d/rc.crond
    blockinfile:
      path: /etc/rc.d/rc.crond
      insertafter: "^ {4}mkdir -p /run/cron$"
      block: |
        /bin/chgrp wheel /run/cron
        /bin/chmod 0710 /run/cron
  - name: chmod crond (Slackware)
    file:
      path: /usr/sbin/crond
      mode: '0700'
  when: ansible_distribution == "Slackware"
  become: yes
# SSH
- name: Harden SSH daemon configuration
  become: yes
  template:
    src: "{{ playbook_dir }}/templates/sshd_config-{{ ansible_distribution }}.j2"
    dest: /etc/ssh/sshd_config
    validate: /usr/sbin/sshd -t -f %s
  register: result
  failed_when:
    - result.failed == true
    - '"sshd: no hostkeys available -- exiting." not in result.stderr'
- name: Restart sshd
  when: ansible_distribution == "Debian" or ansible_distribution == "Kali GNU/Linux"
  become: yes
  service:
    name: ssh
    state: restarted
- name: Restart sshd (Slackware)
  when: ansible_distribution == "Slackware"
  become: yes
  command: /bin/sh /etc/rc.d/rc.sshd restart
  register: result
  failed_when:
    - result.failed == true
    - '"WARNING: There does not appear to be a parent instance of sshd running." not in result.stdout'
- name: Harden SSH client configuration
  become: yes
  when: ansible_distribution == "Slackware"
  template:
    src: "{{ playbook_dir }}/templates/ssh_config-{{ ansible_distribution }}.j2"
    dest: /etc/ssh/ssh_config
    owner: root
    group: root
    mode: '0644'
# Misc
#- name: Install icmpinfo
#  become: yes
#  when: ansible_distribution == "Debian" or ansible_distribution == "Kali GNU/Linux"
#  apt:
#    name: icmpinfo
#    update_cache: yes
- name: Install icmpinfo (Slackware)
  become: yes
  when: ansible_distribution == "Slackware"
  slackpkg:
    name: icmpinfo
    state: present
- name: Slackware rc.d
  block:
  - name: Create /etc/rc.d/rc.local (Slackware)
    copy:
      src: "{{ playbook_dir }}/../newconfs/rc.d/rc.local.new"
      dest: /etc/rc.d/rc.local
      owner: root
      group: root
      mode: '0700'
  - name: Create /etc/rc.d/rc.local_shutdown symlink (Slackware)
    file:
      src: /etc/rc.d/rc.local
      dest: /etc/rc.d/rc.local_shutdown
      owner: root
      group: root
      state: link
  - name: Enable smartd (Slackware)
    file:
      path: /etc/rc.d/rc.smartd
      owner: root
      group: root
      mode: '0700'
    register: result
    failed_when:
      - result.failed == true
      - result.state != "absent"
  - name: Disable atd (Slackware)
    replace:
      path: /etc/rc.d/rc.M
      after: '# Start atd \(manages jobs scheduled with ''at''\):'
      before: '# Slackware-Mini-Quota-HOWTO:'
      regexp: '^#?(.+)$'
      replace: '#\g<1>'
  - name: NFSv4 support in rc.inet2
    blockinfile:
      path: /etc/rc.d/rc.inet2
      insertbefore: "^# If /etc/rc.d/rc.rpc is executable, run it to load rpc.portmap, rpc.lockd,$"
      block: |
        # Mount remote (NFSv4) filesystems:
        if cat /etc/fstab | grep -v '^#' | grep -w nfs4 1> /dev/null 2> /dev/null ; then
          # Check if we have Kerberos keytab
          if [ -f /etc/krb5.keytab -a -x /usr/sbin/rpc.gssd ]
          then
            if ! ps axc | grep -q rpc.gssd ; then
              echo "Starting RPCSEC_GSS daemon:  /usr/sbin/rpc.gssd"
              /usr/sbin/rpc.gssd
            fi
          fi
          echo "Mounting remote (NFSv4) file systems:  /sbin/mount -a -t nfs4"
          /sbin/mount -a -t nfs4
          /sbin/mount -v -t nfs4
        fi
  when: ansible_distribution == "Slackware"
  become: yes
