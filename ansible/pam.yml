---
# The login ACL following this task will actually start blocking access, so
# check that we are not locking ourselves out of the system being hardened.
- name: 'Check that some user(s) exist in "{{ allowed_group }}" group'
  getent:
    database: group
    key: "{{ allowed_group }}"
  failed_when: getent_group.{{ allowed_group }}[2] == ""
- name: Configure access.conf
  block:
    - name: Stat /etc/security/access.conf
      stat:
        path: /etc/security/access.conf
        checksum_algorithm: sha512
      register: stat_result
    - name: Configure login access control table (PAM)
      # Only modify access.conf when it's unmodified. Otherwise expect it to have
      # custom modifications and our hardening might break existing configuration.
      # https://github.com/linux-pam/linux-pam/blob/master/modules/pam_access/access.conf
      when: stat_result.stat.exists == True and stat_result.stat.checksum == "b27e5ad84e17b7a63611e5cfa88f72556f240d6d0ae1d4437f173808d65091b65d3316dcd3fa133d358c5f14508dc0314a8b3f44abf1c42ccb369586b97f5422"
      become: yes
      blockinfile:
        path: /etc/security/access.conf
        block: |
          + : root : LOCAL
          + : daemon : cron
          - : ALL : cron
          + : ({{ allowed_group }}) : ALL
          + : Debian-gdm lightdm : LOCAL
          - : ALL : ALL
    - name: Add pam_access to system-auth (Slackware)
      when: ansible_distribution == "Slackware"
      become: yes
      lineinfile:
        path: /etc/pam.d/system-auth
        regexp: '^account\s+required\s+pam_access\.so\b.*$'
        line: 'account     required      pam_access.so nodefgroup'
        insertafter: '^account {5}required {6}pam_time\.so\b.*$'
# This needs to happen before populating /etc/pam.d/other with pam_deny or otherwise sudo will stop working
- name: Create /etc/pam.d/sudo (Slackware)
  when: ansible_distribution == "Slackware"
  become: yes
  copy:
    dest: /etc/pam.d/sudo
    owner: root
    group: root
    mode: '0644'
    content: |
      #%PAM-1.0

      auth       include      system-auth
      account    include      system-auth
      password   include      system-auth
      session    include      system-auth
- name: Create secure default /etc/pam.d/other
  when: ansible_distribution == "Debian" or ansible_distribution == "Kali GNU/Linux" or ansible_os_family == "RedHat" or ansible_distribution == "Slackware"
  become: yes
  copy:
    src: "{{ playbook_dir }}/../newconfs/pam.d/other.new"
    dest: /etc/pam.d/other
    owner: root
    group: root
    mode: '0644'
- name: Configure pam_faillock & pam_faildelay (Slackware)
  block:
    - name: Configure /etc/security/faillock.conf
      template:
        src: "{{ playbook_dir }}/../newconfs/faillock.conf.new"
        dest: /etc/security/faillock.conf
        owner: root
        group: root
    - name: Create faillock directory
      file:
        path: /var/run/faillock
        state: directory
        mode: '0751'
    - name: Add pam_faillock and pam_faildelay to /etc/pam.d/system-auth
      replace:
        path: /etc/pam.d/system-auth
        regexp: '^auth\s+required\s+pam_unix\.so.*$\n'
        replace: |
          auth        optional      pam_faildelay.so delay={{ fail_delay * 1000000 }}
          auth        [success=1 default=bad] pam_unix.so likeauth
          auth        [default=die] pam_faillock.so authfail
          auth        required      pam_faillock.so authsucc
  when: ansible_distribution == "Slackware"
  become: yes
- name: Remove auth include postlogin (Slackware)
  when: ansible_distribution == "Slackware"
  become: yes
  lineinfile:
    path: /etc/pam.d/{{ item }}
    regexp: '^auth\s+include\s+postlogin$'
    state: absent
  with_items:
    - kde
    - login
    - sddm
    - sshd
# https://github.com/pyllyukko/harden.sh/issues/64
- name: nullok
  block:
    - name: Disallow blank passwords (Debian)
      when: ansible_distribution == "Debian" or ansible_distribution == "Kali GNU/Linux"
      replace:
        path: /etc/pam.d/common-auth
        regexp: '\s+nullok(_secure)?'
        replace: ''
    # There are other lines also than auth pam_unix.so that is handled by the "Add
    # pam_faillock and pam_faildelay to /etc/pam.d/system-auth" task
    - name: Disallow blank passwords (Slackware)
      when: ansible_distribution == "Slackware"
      replace:
        path: /etc/pam.d/system-auth
        regexp: '\s+nullok'
        replace: ''
  become: yes
- name: Enable pam_wheel.so in /etc/pam.d/su
  when: ansible_distribution == "Debian" or ansible_distribution == "Kali GNU/Linux" or ansible_os_family == "RedHat"
  become: yes
  replace:
    path: /etc/pam.d/su
    regexp: '^#\s*(auth\s+required\s+pam_wheel\.so(\s+use_uid)?)$'
    replace: '\1'
    validate: '/bin/grep "^auth\s\+required\s\+pam_wheel\.so.*$" %s'
- name: Enable polyinstantiated temp directories
  when: ansible_distribution == "Debian" or ansible_distribution == "Kali GNU/Linux" or ansible_os_family == "RedHat"
  become: yes
  replace:
    path: /etc/security/namespace.conf
    regexp: '^#({{ item }}\s+({{ item }})?/tmp-inst/\s+level\s+root,adm)$'
    replace: '\1'
    validate: '/bin/grep "^{{ item }}\s\+\({{ item }}\)\?/tmp-inst/\s\+level\s\+root,adm$" %s'
  with_items:
    - '/tmp'
    - '/var/tmp'
- name: Remove adm user from /etc/security/namespace.conf
  when: ansible_distribution == "Debian" or ansible_distribution == "Kali GNU/Linux"
  become: yes
  replace:
    path: /etc/security/namespace.conf
    regexp: '^(.+),adm$'
    replace: '\1'
    validate: '/bin/grep "^\(/var\)\?/tmp\s\+\(/var/tmp\)\?/tmp-inst/\s\+level\s\+root$" %s'
- name: Debian pam-configs
  block:
    - name: Copying new pam-configs
      copy:
        src: "{{ playbook_dir }}/../newconfs/pam-configs/{{ item }}.new"
        dest: /usr/share/pam-configs/{{ item }}
      with_items:
        - access
        - lastlog
        - polyinstation
        - pwhistory
        - tally2
        - uid_ge_1000
        - umask
        - time
        - inactive
    - name: Copying new pam-configs (templates)
      template:
        src: "{{ playbook_dir }}/templates/pam-configs/{{ item }}.j2"
        dest: /usr/share/pam-configs/{{ item }}
        owner: root
        group: root
      with_items:
        - faildelay
    - name: Run pam-auth-update (Debian)
      command: /usr/sbin/pam-auth-update --package
  when: ansible_distribution == "Debian" or ansible_distribution == "Kali GNU/Linux"
  become: yes
- name: Enable additional PAM modules with authconfig (RH)
  when: ansible_os_family == "RedHat"
  become: yes
  command: /sbin/authconfig --enable{{ item }}
  with_items:
    #- pamaccess
    - faillock
- name: Password related
  block:
    - name: Add rounds=500000 to pam_unix in /etc/pam.d/common-passwd
      when: ansible_distribution == "Debian" or ansible_distribution == "Kali GNU/Linux"
      replace:
        path: /etc/pam.d/common-password
        regexp: '^(password\s+.+\s+pam_unix\.so(?!.*\brounds=[0-9]+\b).*)$'
        replace: '\1 rounds=500000'
    - name: Configure pwquality
      replace:
        path: /etc/security/pwquality.conf
        regexp: '^(# ?)?({{ item.key }}\s+)=.*$'
        replace: '\g<2>= {{ item.value }}'
        validate: '/bin/grep "^{{ item.key }}\s\+= {{ item.value }}$" %s'
      when: ansible_os_family == "RedHat" or ansible_distribution == "Slackware"
      with_dict:
        retry: 3
        minlen: 14
        minclass: 4
        dcredit: -1
        ucredit: -1
        ocredit: -1
        lcredit: -1
    - name: Configure minlen -> 14 in /etc/pam.d/system-auth (Slackware)
      replace:
        path: /etc/pam.d/system-auth
        regexp: '^(password.+\sminlen=)[0-9]+(.*)$'
        replace: '\g<1>14\g<2>'
        validate: '/bin/grep "^password.\+minlen=14.*$" %s'
      when: ansible_distribution == "Slackware"
  become: yes
